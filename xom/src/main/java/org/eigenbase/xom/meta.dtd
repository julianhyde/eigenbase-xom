<!--
     This dtd file was automatically generated from XOM model meta.
     Do not edit this file by hand.
  -->

<!--
     This model is the XOM Meta Model.  It is the specification of the model used
     to define new XML-based models.  It is also an instance of itself.
  -->
<!--
     The Definition class represents a generic type of element definition.
     The actual definition may be of a Class, Element, or String.
     Definitions are the basic building blocks of a model.
  -->
<!ENTITY % Definition "Element|Class|StringElement|Plugin|Import">

<!--
     The FullDefinition class represents a fully-specified definition
     that may include content.
  -->
<!ENTITY % FullDefinition "Element|Class">

<!--
     The Content class contains all entities which represent types of
     content which may appear within an Element.  Content includes
     Objects, Arrays, Strings, and special markers such as Any.
  -->
<!ENTITY % Content "Object|Array|Any|CData">

<!--
     Model is the top-level element for a model description.  The model element
     contains all other elements in the model and also defines the model's
     basic attributes, such as its name and version number.
  -->
<!ELEMENT Model (Doc?,((%Definition;))+)>
<!ATTLIST Model
name CDATA #REQUIRED
dtdName CDATA #IMPLIED
className CDATA #IMPLIED
packageName CDATA #IMPLIED
importName CDATA #IMPLIED
root CDATA #REQUIRED
prefix CDATA #IMPLIED
version CDATA #REQUIRED
defaultKeepDef (true|false) "false"
>

<!--
     An Element Definition defines a basic entity of the meta model.  Elements
     are containers for two types of data: attributes and content.  Attributes
     are simple name/value pairs which may take on the full range of Java
     types.  Content consists of other Elements and Strings, either
     appearing alone or as arrays.
  -->
<!ELEMENT Element (Doc?,(Attribute)*,((%Content;))*,Any?,CData?,Code?)>
<!ATTLIST Element
type CDATA #REQUIRED
class CDATA #IMPLIED
dtdName CDATA #IMPLIED
abstract (true|false) "false"
contentModel (sequential|random|mixed|any|cdata) "sequential"
keepDef (true|false) #IMPLIED
>

<!--
     A Class Definition defines a class of entities.  A class specifies a group
     of entities with similar properties.  Full inheritence is supported,
     although there are limits on what can be overridden.
  -->
<!ELEMENT Class (Doc?,(Attribute)*,((%Content;))*,Any?,CData?,Code?)>
<!ATTLIST Class
class CDATA #REQUIRED
superclass CDATA #IMPLIED
contentModel (sequential|random|mixed|any|cdata) "sequential"
keepDef (true|false) #IMPLIED
>

<!--
     A StringElement is a simple type of element which has no attributes and
     whose content is a single String (usually represented as a CDATA section).
     StringElements are used when raw text must be included in a model, such
     as raw Java code, or SQL statements, or HTML documentation.
  -->
<!ELEMENT StringElement (Doc?)>
<!ATTLIST StringElement
type CDATA #REQUIRED
>

<!--
     A Plugin in a special type of element whose content may be derived from
     a different model.  The exact model to use is specified by the
     individual XML file, allowing a Plugin element to link to another
     model dynamically.  The Plugin element automatically defines the
     defPackage and defClass attributes.  Other attributes may be added
     as needed.  Code and documentation sections are supported as well.
  -->
<!ELEMENT Plugin (Doc?,(Attribute)*,Code?)>
<!ATTLIST Plugin
type CDATA #REQUIRED
class CDATA #IMPLIED
>

<!--
     An Import as a special type of element that represents another element
     stored in an external model.  The model to use is specified by the
     defPackage and defClass attributes of the import.
     An Import may not be derived from any class.
  -->
<!ELEMENT Import (Doc?)>
<!ATTLIST Import
type CDATA #REQUIRED
defPackage CDATA #REQUIRED
defClass CDATA #REQUIRED
dtdName CDATA #IMPLIED
>

<!--
     The Doc entity specifies a documentation section.  The text contained
     in this element should be raw text or HTML used to document the object
     in which the Doc section appears.
  -->
<!ELEMENT Doc (#PCDATA)>

<!--
     The Code entity specifies a raw block of Java code.  Each Class/Element
     becomes represented by a Java Class.  Including a Code block inside
     a Class or Element will insert the code directly into the corresponding
     class.  No checking is done on the code until it is complied later.
  -->
<!ELEMENT Code (#PCDATA)>

<!--
     The Attribute entity appears within any Element definition.  It defines
     an Attribute, which is a name/value pair used to hold data inside of an
     Element.  The Attribute's definition includes its name, type, and
     usage information (default value and whether or not it is required).
     An Attribute definition may limit its values by specifying Value
     objects.
  -->
<!ELEMENT Attribute (Doc?,(Value)*)>
<!ATTLIST Attribute
name CDATA #REQUIRED
type CDATA "String"
required (true|false) "false"
default CDATA #IMPLIED
>

<!--
     The Value entity specifies a single value in the set of allowed values
     for an Attribute.  The value is specifies as text so that any special
     characters may appear.
  -->
<!ELEMENT Value (#PCDATA)>

<!--
     An Object is a single instance of an Element type.  Objects have an
     identifying name and a type.  The name identifies the object within
     its Element and must be unique within the Element.  The object is itself
     an instance of an Element, and this Element is identified by the type.
     The type may be the type name of an Element or the class name of a Class.
  -->
<!ELEMENT Object (Doc?)>
<!ATTLIST Object
name CDATA #REQUIRED
type CDATA #REQUIRED
required (true|false) "false"
>

<!--
     An Array is a set of multiple instances of Elements.  The Array
     has an identifying name and a base type.  The name identifies the array
     within its Element and must be unique within the Element.  Each object
     in the array is an instance of the Element identified by the type.
     The type may be the type name of an Element or the class name of a Class.
  -->
<!ELEMENT Array (Doc?)>
<!ATTLIST Array
name CDATA #REQUIRED
type CDATA #REQUIRED
min CDATA "0"
max CDATA "0"
>

<!--
     The Any content is a special marker which allows an Element to
     contain any type of data.  The data will appear in a single
     array called "children".  The data will contain all kinds of
     node (elements, comments, text) if the content model is
     "mixed", otherwise just elements. If an Any marker appears, no other
     content may appear in the element.
  -->
<!ELEMENT Any EMPTY>

<!--
     The CData content is a special marker which allows an Element to
     contain a single CDATA section as its only content, yet still
     have attributes.  The data will appear in a single String
     called "cdata".  If a CData marker appears, no other
     content may appear in the element.
  -->
<!ELEMENT CData EMPTY>

